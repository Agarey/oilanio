import { MouseEvent as ReactMouseEvent, MouseEventHandler, TouchEvent as ReactTouchEvent, TouchEventHandler } from 'react';
export declare type LongPressEvent<Target = Element> = ReactMouseEvent<Target> | ReactTouchEvent<Target>;
export declare type LongPressCallback<Target = Element> = (event?: LongPressEvent<Target>) => void;
export declare enum LongPressDetectEvents {
    BOTH = "both",
    MOUSE = "mouse",
    TOUCH = "touch"
}
export declare type LongPressResult<Target, DetectType extends LongPressDetectEvents = LongPressDetectEvents.BOTH> = DetectType extends LongPressDetectEvents.BOTH ? {
    onMouseDown: MouseEventHandler<Target>;
    onMouseUp: MouseEventHandler<Target>;
    onMouseMove: MouseEventHandler<Target>;
    onMouseLeave: MouseEventHandler<Target>;
    onTouchStart: TouchEventHandler<Target>;
    onTouchMove: TouchEventHandler<Target>;
    onTouchEnd: TouchEventHandler<Target>;
} : DetectType extends LongPressDetectEvents.MOUSE ? {
    onMouseDown: MouseEventHandler<Target>;
    onMouseUp: MouseEventHandler<Target>;
    onMouseMove: MouseEventHandler<Target>;
    onMouseLeave: MouseEventHandler<Target>;
} : DetectType extends LongPressDetectEvents.TOUCH ? {
    onTouchStart: TouchEventHandler<Target>;
    onTouchMove: TouchEventHandler<Target>;
    onTouchEnd: TouchEventHandler<Target>;
} : never;
export interface LongPressOptions<Target = Element> {
    threshold?: number;
    captureEvent?: boolean;
    detect?: LongPressDetectEvents;
    cancelOnMovement?: boolean | number;
    onStart?: LongPressCallback<Target>;
    onMove?: LongPressCallback<Target>;
    onFinish?: LongPressCallback<Target>;
    onCancel?: LongPressCallback<Target>;
}
export declare function useLongPress<Target = Element>(callback: null, options?: LongPressOptions<Target>): Record<string, never>;
export declare function useLongPress<Target = Element, Callback extends LongPressCallback<Target> = LongPressCallback<Target>>(callback: Callback, options?: LongPressOptions<Target>): LongPressResult<Target>;
export declare function useLongPress<Target = Element, Callback extends LongPressCallback<Target> = LongPressCallback<Target>>(callback: Callback | null, options?: LongPressOptions<Target>): LongPressResult<Target> | Record<string, never>;
